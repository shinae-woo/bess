import scapy.all as scapy

pkt_size = int($SN_PKT_SIZE!'60')
assert(60 <= pkt_size <= 1522)

num_flows = int($SN_FLOWS!'10')
assert(1 <= num_flows <= 10000)

eth = scapy.Ether(src='02:1e:67:9f:4d:ae', dst='06:16:3e:1b:72:32')
ip = scapy.IP(src='192.168.0.1', dst='10.0.0.1')
udp = scapy.UDP(sport=10001, dport=10002)
payload = ('hello' + '0123456789' * 200)[:pkt_size-len(eth/ip/udp)]

pkt = eth/ip/udp/payload
print 'Packet template:'
pkt.show()
pkt_bytes = bytearray(str(pkt))
assert(len(pkt_bytes) == pkt_size)


# load balance into 2 clients
src::Source() \
        -> Rewrite([pkt_bytes]) \
        -> RandomUpdate([{'offset': 26, 'size': 1, \
        'min': 1, 'max':1 + num_flows - 1}]) \
        -> lb::LoadBalance(2)

lb.set_rule({'offset': 26, 'size': 1})
sink::Sink()

lb:0 -> sink
lb:1 -> sink
